// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //x pre-settings
    Mux16(a=x , b=false , sel=zx , out=x1 ); //0 if zx
    Not16(in=x1 , out=notX);
    Mux16(a=x1 , b=notX , sel=nx , out=x2); // negate x if nx

    // y pre-settings
    Mux16(a=y , b=false , sel=zy , out=y1 );  //0 if zy
    Not16(in=y1 , out=notY);
    Mux16(a=y1 , b=notY , sel=ny , out=y2); // negate x if ny

    //computing f(x,y), x+y if f, else x^y
    Add16(a=x2 , b =y2 , out =c1);
    And16(a=x2 , b=y2 , out=c2 ); 
    Mux16(a=c2 , b=c1 , sel=f , out=f1);

    //post-setting, negate output if no, else output
    // LSB of out can be used for ng since lsb is always 0(base2) if out >=0(base10)
    // out if also split into LSB and MSB so it can used to get zr
    Not16(in=f1 , out=notf1);
    Mux16(a=f1 , b=notf1 , sel=no, 
            out=out, out[15]=ng, 
            out[0..7]=outLSB, out[8..15]=outMSB);

    //ouput bit zr, if any bits are 1, zr = 1
    Or8Way(in=outLSB , out=orLSB );
    Or8Way(in=outMSB , out=orMSB );
    Or(a=orLSB , b=orMSB , out=notZr);
    Not(in=notZr, out=zr);
  }